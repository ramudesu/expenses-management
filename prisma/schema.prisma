// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Expense {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Float
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users        User[]

  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
}

model Limit {
  id          String   @id @default(cuid())
  amount      Float
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])

  groupId     String?
  group       Group? @relation(fields: [groupId], references: [id])
}

model Category {
  id          String   @id @default(cuid())
  name       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  groupId String?
  group   Group? @relation(fields: [groupId], references: [id])
  
  expenses  Expense[]
  limits    Limit[]
}

model User {
  id       String   @id @default(cuid())
  name     String
  clerkId  String   @unique
  email    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  expenses    Expense[]
  limits      Limit[]
  categories  Category[]

  groupId   String?
  group     Group? @relation(fields: [groupId], references: [id])
}

model Group {
  id       String   @id @default(cuid())
  name     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  users    User[]
  categories Category[]
  limits    Limit[]
}
